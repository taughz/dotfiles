# base/Containerfile

# Copyright (c) 2023 Tim Perkins

FROM ubuntu:22.04

# Ensure root user
USER root
WORKDIR /

# Make sure we don't get prompted
ARG DEBIAN_FRONTEND="noninteractive"
ARG TERM="dumb"

# Prevent DBus warning message
ENV NO_AT_BRIDGE=1

# Install essential utilities
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        gosu \
        sudo \
        tini \
    && rm -rf /var/lib/apt/lists/*

# Install some basic utilities
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        bash-completion \
        bzip2 \
        ca-certificates \
        curl \
        faketime \
        file \
        gnupg \
        gzip \
        less \
        locales \
        lz4 \
        lzip \
        lzop \
        nano \
        openssh-client \
        p7zip \
        tar \
        tzdata \
        unzip \
        xz-utils \
        zip \
    && rm -rf /var/lib/apt/lists/*

# Install tools for network debugging
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        iproute2 \
        iputils-arping \
        iputils-clockdiff \
        iputils-ping \
        iputils-tracepath \
        dnsutils \
    && rm -rf /var/lib/apt/lists/*

# Set up language
ENV LANG="en_US.UTF-8"

# Set up locale
RUN locale-gen $LANG \
    && update-locale LANG=$LANG

# Git variables
ARG GIT_DEB_URL="https://ppa.launchpadcontent.net/git-core/ppa/ubuntu"
ARG GIT_DEB_DIST="jammy"
ARG GIT_DEB_COMP="main"
ARG GIT_KEY_FINGERPRINT="0xe1dd270288b4e6030699e45fa1715d88e1df1f24"
ARG GIT_KEY_URL="https://keyserver.ubuntu.com/pks/lookup?op=get&search=$GIT_KEY_FINGERPRINT"
ARG GIT_KEY_FILE="/usr/share/keyrings/git-keyring.gpg"

# Add Git repo
RUN curl -fL "$GIT_KEY_URL" | gpg --dearmor > $GIT_KEY_FILE \
    && { \
        echo "# GIT Repo"; \
        echo "deb [signed-by=$GIT_KEY_FILE] $GIT_DEB_URL $GIT_DEB_DIST $GIT_DEB_COMP"; \
        echo "deb-src [signed-by=$GIT_KEY_FILE] $GIT_DEB_URL $GIT_DEB_DIST $GIT_DEB_COMP"; \
    } >> /etc/apt/sources.list.d/git.list

# Install fundamental dev tools
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        cmake \
        g++ \
        gcc \
        git \
        make \
        python3 \
        python3-pip \
        shellcheck \
    && rm -rf /var/lib/apt/lists/*

# Non-root user variables
ARG DEV_USER="dev"
ARG DEV_USER_UID=7777
ARG DEV_USER_GID=$DEV_USER_UID
ARG DEV_USER_FULLNAME=$DEV_USER
ARG DEV_USER_HOME="/home/$DEV_USER"
ARG DEV_USER_SHELL="/bin/bash"

# Persist these variables for other container layers
ENV DEV_USER=$DEV_USER
ENV DEV_USER_UID=$DEV_USER_UID
ENV DEV_USER_GID=$DEV_USER_GID
ENV DEV_USER_FULLNAME=$DEV_USER_FULLNAME
ENV DEV_USER_HOME=$DEV_USER_HOME
ENV DEV_USER_SHELL=$DEV_USER_SHELL

# Create non-root user
RUN groupadd --gid $DEV_USER_GID $DEV_USER \
    && useradd \
        --no-log-init \
        --uid $DEV_USER_UID \
        --gid $DEV_USER_GID \
        --comment "$DEV_USER_FULLNAME,,," \
        --home-dir $DEV_USER_HOME \
        --shell $DEV_USER_SHELL \
        --create-home \
        $DEV_USER \
    && usermod --append --groups sudo $DEV_USER

# Make local bin directory and add to path
RUN mkdir -m 755 $DEV_USER_HOME/.local \
    && chown $DEV_USER_UID:$DEV_USER_GID $DEV_USER_HOME/.local \
    && mkdir -m 755 $DEV_USER_HOME/.local/bin \
    && chown $DEV_USER_UID:$DEV_USER_GID $DEV_USER_HOME/.local/bin
ENV PATH="$DEV_USER_HOME/.local/bin:$PATH"

# Set up a run directory for the user
RUN mkdir -m 755 /run/user \
    && mkdir -m 700 /run/user/$DEV_USER_UID \
    && chown $DEV_USER_UID:$DEV_USER_GID /run/user/$DEV_USER_UID

# Set up sudo for user
RUN echo "$DEV_USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers \
    && sudo -u $DEV_USER touch $DEV_USER_HOME/.sudo_as_admin_successful

# Make a directory for mounting volumes, to be used by other container layers
ENV VOLS_DIR="/vols"
RUN mkdir -m 755 $VOLS_DIR

# Make a directory for shell config
ENV SHELL_CONFIG_DIR="$VOLS_DIR/shell"
RUN mkdir -m 755 $SHELL_CONFIG_DIR \
    && chown $DEV_USER_UID:$DEV_USER_GID $SHELL_CONFIG_DIR

# Setup Bash history
RUN BASH_CONFIG_DIR=$SHELL_CONFIG_DIR/bash \
    && sudo -u $DEV_USER mkdir -m 755 $BASH_CONFIG_DIR \
    && sudo -u $DEV_USER touch $BASH_CONFIG_DIR/bash_history \
    && sudo -u $DEV_USER ln -s $BASH_CONFIG_DIR/bash_history $DEV_USER_HOME/.bash_history

# Modify PS1 to put a * after the hostname. This is sort of useful because it
# let's you quickly see if you are inside the container or not.
RUN sed -i 's;PS1.*\\h;\0*;' /root/.bashrc $DEV_USER_HOME/.bashrc

# Enable GPG agent by adding GPG_TTY
RUN { \
        echo; \
        echo "# Set this for gpg-agent"; \
        echo "export GPG_TTY=\$(tty)"; \
    } >> $DEV_USER_HOME/.bashrc

# Create directory for entry point scripts
ENV ENTRYPOINT_DIR="/etc/entrypoint.d"
RUN mkdir -m 755 $ENTRYPOINT_DIR

# Copy the entry point script, login shim, etc
COPY entrypoint.sh /entrypoint.sh
COPY fix_user.sh $ENTRYPOINT_DIR/00_fix_user.sh
COPY login_shim.sh $ENTRYPOINT_DIR/01_login_shim.sh

# Here we set the entry point to the main entry point script. This script in
# turn execs a chain of other entry points. This allows other images to layer
# their own entry points onto the original entry point.
ENTRYPOINT ["/usr/bin/tini", "--", "/entrypoint.sh"]

# By default just run Bash
CMD ["/bin/bash"]

# Switch to non-root user
USER $DEV_USER
WORKDIR $DEV_USER_HOME

# Capture the MD5 sum used to ID the container
ARG BASE_CONTAINER_MD5SUM
ENV BASE_CONTAINER_MD5SUM=$BASE_CONTAINER_MD5SUM
